# Generated by Django 5.2 on 2025-04-28 13:45

import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Fecha de creación"
                    ),
                ),
                (
                    "modified_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Fecha de modificación"
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Fecha de eliminación"
                    ),
                ),
                (
                    "first_name",
                    models.CharField(max_length=150, verbose_name="Nombres"),
                ),
                (
                    "last_name",
                    models.CharField(max_length=150, verbose_name="Apellido Paterno"),
                ),
                (
                    "maternal_surname",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="Apellido Materno"
                    ),
                ),
                (
                    "document_type",
                    models.CharField(
                        choices=[
                            ("DNI", "Documento Nacional de Identidad"),
                            ("CE", "Carnet de Extranjería"),
                            ("PASAPORTE", "Pasaporte"),
                        ],
                        default="DNI",
                        max_length=10,
                        verbose_name="Tipo de Documento",
                    ),
                ),
                (
                    "document_number",
                    models.CharField(
                        max_length=20,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Formato de documento inválido",
                                regex="^[0-9]{8,12}$",
                            )
                        ],
                        verbose_name="Número de Documento",
                    ),
                ),
                (
                    "ubigeo",
                    models.CharField(
                        blank=True,
                        max_length=6,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Ubigeo debe tener 6 dígitos",
                                regex="^[0-9]{6}$",
                            )
                        ],
                        verbose_name="Ubigeo",
                    ),
                ),
                ("current_address", models.TextField(verbose_name="Dirección Actual")),
                (
                    "address_reference",
                    models.TextField(blank=True, verbose_name="Referencia"),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Formato de teléfono inválido",
                                regex="^\\+?[0-9]{9,15}$",
                            )
                        ],
                        verbose_name="Teléfono",
                    ),
                ),
                (
                    "emergency_contact",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Contacto de Emergencia"
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(default=False, verbose_name="Verificado"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Usuario",
                "verbose_name_plural": "Usuarios",
                "constraints": [
                    models.UniqueConstraint(
                        fields=("document_type", "document_number"),
                        name="unique_document",
                    )
                ],
            },
        ),
    ]
