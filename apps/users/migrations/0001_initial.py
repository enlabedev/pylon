# Generated by Django 5.2 on 2025-05-04 05:48

import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("core", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Fecha de creación"
                    ),
                ),
                (
                    "modified_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Fecha de modificación"
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Fecha de eliminación"
                    ),
                ),
                ("address", models.CharField(max_length=255, verbose_name="Address")),
                ("street", models.CharField(max_length=255, verbose_name="Street")),
                ("zip_code", models.CharField(max_length=20, verbose_name="Zip Code")),
                (
                    "reference",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Reference"
                    ),
                ),
                (
                    "latitude",
                    models.FloatField(blank=True, null=True, verbose_name="Latitude"),
                ),
                (
                    "longitude",
                    models.FloatField(blank=True, null=True, verbose_name="Longitude"),
                ),
                (
                    "first_name",
                    models.CharField(max_length=150, verbose_name="First Nane"),
                ),
                (
                    "father_surname",
                    models.CharField(max_length=150, verbose_name="Father Surname "),
                ),
                (
                    "maternal_surname",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="Mather Surname"
                    ),
                ),
                (
                    "document_type",
                    models.CharField(
                        choices=[
                            ("ID", "National Identity Document"),
                            ("FC", "Foreigner's Card"),
                            ("PASSPORT", "Passport"),
                        ],
                        default="ID",
                        max_length=10,
                        verbose_name="Document Type",
                    ),
                ),
                (
                    "document_number",
                    models.CharField(
                        max_length=20,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Document number invalid", regex="^[0-9]{8,12}$"
                            )
                        ],
                        verbose_name="Document Number",
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number invalid", regex="^0[0-9]{8}$"
                            )
                        ],
                        verbose_name="Phone",
                    ),
                ),
                (
                    "mobile",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Mobile number invalid", regex="^9[0-9]{8}$"
                            )
                        ],
                        verbose_name="Mobile",
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(default=False, verbose_name="Verificado"),
                ),
                (
                    "department",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_addresses",
                        to="core.department",
                        verbose_name="Department",
                    ),
                ),
                (
                    "district",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_addresses",
                        to="core.district",
                        verbose_name="District",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "province",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_addresses",
                        to="core.province",
                        verbose_name="Province",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Usuario",
                "verbose_name_plural": "Usuarios",
            },
        ),
        migrations.CreateModel(
            name="Contacts",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Fecha de creación"
                    ),
                ),
                (
                    "modified_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Fecha de modificación"
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Fecha de eliminación"
                    ),
                ),
                (
                    "first_name",
                    models.CharField(max_length=150, verbose_name="First Nane"),
                ),
                (
                    "father_surname",
                    models.CharField(max_length=150, verbose_name="Father Surname "),
                ),
                (
                    "maternal_surname",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="Mather Surname"
                    ),
                ),
                (
                    "document_type",
                    models.CharField(
                        choices=[
                            ("ID", "National Identity Document"),
                            ("FC", "Foreigner's Card"),
                            ("PASSPORT", "Passport"),
                        ],
                        default="ID",
                        max_length=10,
                        verbose_name="Document Type",
                    ),
                ),
                (
                    "document_number",
                    models.CharField(
                        max_length=20,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Document number invalid", regex="^[0-9]{8,12}$"
                            )
                        ],
                        verbose_name="Document Number",
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number invalid", regex="^0[0-9]{8}$"
                            )
                        ],
                        verbose_name="Phone",
                    ),
                ),
                (
                    "mobile",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Mobile number invalid", regex="^9[0-9]{8}$"
                            )
                        ],
                        verbose_name="Mobile",
                    ),
                ),
                (
                    "relationship",
                    models.CharField(
                        choices=[
                            ("FAMILY", "Family"),
                            ("FRIEND", "Friend"),
                            ("NEIGHBOR", "Neighbor"),
                            ("OTHER", "Other"),
                        ],
                        default="FAMILY",
                        max_length=50,
                        verbose_name="Relationship",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contacts",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Contact",
                "verbose_name_plural": "Contacts",
                "ordering": ["father_surname"],
            },
        ),
        migrations.AddConstraint(
            model_name="user",
            constraint=models.UniqueConstraint(
                fields=("document_type", "document_number"), name="unique_document"
            ),
        ),
    ]
